rules_version = '2';
service cloud.firestore {
  match /databases/{db}/documents {
    function authed() { return request.auth != null; }

    match /arenas/{arenaId} {
      allow read: if true;
      allow create, update: if authed(); // arena metadata

      // Host-authoritative state (writer elected in app)
      match /state/{docId} {
        allow read: if true;
        allow write: if authed();
      }

      // Session-scoped presence (per-tab)
      match /presence/{presenceId} {
        allow read: if true;

        // Create: allow any authed client to create its presence doc when it stamps its UID
        allow create: if authed()
          && request.resource.data.authUid == request.auth.uid;

        // Update/Delete: only the owner of the existing doc may change/remove it;
        // prevent authUid from being hijacked.
        allow update, delete: if authed()
          && resource.data.authUid == request.auth.uid
          && (!('authUid' in request.resource.data)
              || request.resource.data.authUid == resource.data.authUid);
      }

      // Inputs fan-in: inputs/{presenceId}/events/{eventId}
      match /inputs/{presenceId}/events/{eventId} {
        allow read: if true;
        allow create: if authed()
          && request.resource.data.authUid == request.auth.uid;
      }
    }

    // Players (existing)
    match /players/{playerId} {
      allow read, write: if authed();
    }

    // Passcodes (existing)
    match /passcodes/{passcode} {
      allow read, write: if authed();
    }

    // Boss (new)
    match /boss/{doc} {
      allow read, write: if authed();
    }

    // Leaderboard (existing)
    match /leaderboard/{entry} {
      allow read: if authed();
    }

    // Meta (existing)
    match /meta/{doc} {
      allow read: if true;
      allow write: if false;
    }
  }
}
