rules_version = '2';
service cloud.firestore {
  match /databases/{db}/documents {
    function authed() { return request.auth != null; }

    match /arenas/{arenaId} {
      allow read: if true;
      allow create, update: if authed();

      // Per-tab presence shard
      match /presence/{presenceId} {
        allow read: if true;
        allow create, update, delete: if authed()
          && request.resource.data.authUid == request.auth.uid;
      }

      // Inputs fan-in: inputs/{presenceId}/events/{eventId}
      match /inputs/{presenceId}/events/{eventId} {
        allow read: if true;
        allow create: if authed()
          && request.resource.data.authUid == request.auth.uid;
      }

      // State writer (host). Keep permissive for now.
      match /state/{docId} {
        allow read: if true;
        allow write: if authed();
      }

      match /seats/{seatNo} {
        allow read: if authed();
        allow create: if authed() && request.resource.data.uid == request.auth.uid;
        allow update: if authed()
          && resource.data.uid == request.auth.uid
          && request.resource.data.uid == request.auth.uid;
        allow delete: if authed() && resource.data.uid == request.auth.uid;
      }
    }

    // Players (existing)
    match /players/{playerId} {
      allow read, write: if authed();
    }

    // Passcodes (existing)
    match /passcodes/{passcode} {
      allow read, write: if authed();
    }

    // Boss (new)
    match /boss/{doc} {
      allow read, write: if authed();
    }

    // Leaderboard (existing)
    match /leaderboard/{entry} {
      allow read: if authed();
    }

    // Meta (existing)
    match /meta/{doc} {
      allow read: if true;
      allow write: if false;
    }
  }
}
