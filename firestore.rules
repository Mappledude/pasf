rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    // DEV: permissive but explicit (tighten later)
    match /arenas/{arenaId} {
      allow read: if isSignedIn();
      allow write: if isSignedIn();

      match /inputs/{uid} {
        allow read: if isSignedIn();
        allow write: if isSignedIn() && request.auth.uid == uid;
      }

      match /seats/{seatNo} {
        allow read: if isSignedIn();
        allow create: if isSignedIn() && request.resource.data.uid == request.auth.uid;
        allow update: if isSignedIn()
          && resource.data.uid == request.auth.uid
          && request.resource.data.uid == request.auth.uid;
        allow delete: if isSignedIn() && resource.data.uid == request.auth.uid;
      }

      // Presence subcollection (existing)
      match /presence/{playerId} {
        allow read, write: if isSignedIn();
      }
    }

    // IMPORTANT: arena state docs live at /arenas/{arenaId}/state/{stateId}
    match /arenas/{arenaId}/state/{stateId} {
      function hasMatchingWriterUid() {
        return (request.resource != null && request.resource.data.writerUid == request.auth.uid)
          || (resource != null && resource.data.writerUid == request.auth.uid);
      }

      allow read: if isSignedIn();
      allow write: if isSignedIn()
        && (stateId != "current" || hasMatchingWriterUid());
    }

    // Players (existing)
    match /players/{playerId} {
      allow read, write: if isSignedIn();
    }

    // Passcodes (existing)
    match /passcodes/{passcode} {
      allow read, write: if isSignedIn();
    }

    // Boss (new)
    match /boss/{doc} {
      allow read, write: if isSignedIn();
    }

    // Leaderboard (existing)
    match /leaderboard/{entry} {
      allow read: if isSignedIn();
    }

    // Meta (existing)
    match /meta/{doc} {
      allow read: if true;
      allow write: if false;
    }
  }
}
