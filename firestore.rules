rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    // DEV: permissive but explicit (tighten later)
    match /arenas/{arenaId} {
      allow read: if isSignedIn();
      allow write: if isSignedIn();

      match /inputs/{docId} {
        allow read: if isSignedIn();
        allow create, update: if isSignedIn()
          && request.resource.data.authUid == request.auth.uid;
        allow delete: if isSignedIn()
          && resource != null
          && resource.data.authUid == request.auth.uid;
      }

      match /seats/{seatNo} {
        allow read: if isSignedIn();
        allow create: if isSignedIn() && request.resource.data.uid == request.auth.uid;
        allow update: if isSignedIn()
          && resource.data.uid == request.auth.uid
          && request.resource.data.uid == request.auth.uid;
        allow delete: if isSignedIn() && resource.data.uid == request.auth.uid;
      }

      match /presence/{presenceId} {
        allow read: if true;
        allow write: if request.auth != null;
      }
    }

    match /arenas/{arenaId}/state/{docId} {
      allow read: if true;
      allow write: if request.auth != null;
    }

    // Players (existing)
    match /players/{playerId} {
      allow read, write: if isSignedIn();
    }

    // Passcodes (existing)
    match /passcodes/{passcode} {
      allow read, write: if isSignedIn();
    }

    // Boss (new)
    match /boss/{doc} {
      allow read, write: if isSignedIn();
    }

    // Leaderboard (existing)
    match /leaderboard/{entry} {
      allow read: if isSignedIn();
    }

    // Meta (existing)
    match /meta/{doc} {
      allow read: if true;
      allow write: if false;
    }
  }
}
